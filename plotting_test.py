import plotting_results
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import Dataset, DataLoader
import numpy as np
import torch.optim as optim
import matplotlib.pyplot as plt
import pickle

import utils
import plotting_results
import data_management

from cnn import CNN
from torch.optim import lr_scheduler
import os
current_dir = os.path.dirname(os.path.realpath(__file__))
from torch.utils.tensorboard import SummaryWriter
writer = SummaryWriter('logs/')
import sys
device = torch.device('mps' if torch.backends.mps.is_available() else 'cpu')
import yaml
with open('model.yml', 'r') as file:
    yaml_input = yaml.safe_load(file)

import sklearn



training_loss =  [2.0773368888431127, 1.6492693686485291]
test_loss =  [1.8689029216766357, 1.6516048908233643]
num_epochs =  2
learning_rate =  0.0003
classes =  ('Drums_Hat', 'Drums_Tom', 'Drums_Snare', 'Drums_Kick', 'Piano', 'Guitar_Acoustic', 'Brass', 'Bass', 'String', 'Flute')
accuracies =  [36.80555555555556, 61.111111111111114, 37.5, 33.333333333333336, 47.22222222222222, 22.22222222222222, 12.5, 79.16666666666667, 55.55555555555556, 9.722222222222221, 9.722222222222221]
y_test =  torch.tensor([4, 6, 4, 4, 6, 4, 6, 4, 4, 6, 6, 6, 4, 6, 6, 6, 6, 6, 6, 6, 4, 6, 6, 6,
        6, 4, 4, 6, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6, 6, 4, 6, 6, 4, 6, 6, 6, 4, 6,
        6, 6, 4, 6, 6, 4, 6, 6, 6, 4, 6, 6, 4, 6, 6, 4, 6, 6, 4, 6, 6, 4, 6, 6,
        6, 6, 6, 6, 4, 6, 2, 2, 6, 6, 6, 4, 4, 2, 6, 2, 2, 2, 2, 2, 6, 4, 6, 6,
        4, 6, 6, 2, 2, 2, 6, 6, 6, 6, 2, 6, 6, 6, 2, 4, 2, 2, 2, 2, 2, 2, 4, 4,
        2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4,
        2, 2, 2, 2, 4, 4, 4, 2, 2, 2, 4, 2, 4, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2,
        2, 2, 2, 4, 2, 2, 4, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 4, 2, 4, 2, 2, 2, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 7, 0, 1, 1, 0,
        1, 0, 1, 1, 0, 7, 7, 1, 1, 1, 1, 1, 0, 0, 7, 1, 1, 7, 1, 1, 0, 1, 0, 0,
        0, 0, 0, 0, 7, 1, 0, 0, 0, 7, 0, 0, 0, 7, 7, 7, 0, 0, 1, 1, 0, 1, 1, 1,
        0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 7, 7, 0, 1, 0, 7, 0, 7, 7, 1, 1, 0, 1, 0,
        7, 1, 7, 7, 1, 1, 7, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1,
        1, 7, 1, 0, 7, 1, 1, 0, 0, 0, 7, 0, 7, 0, 0, 0, 1, 0, 0, 0, 1, 7, 7, 1,
        0, 1, 0, 1, 1, 1, 1, 7, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0,
        1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 7, 0, 7, 0, 0, 7, 7, 0, 0, 0, 7, 7,
        7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7,
        9, 9, 9, 9, 9, 9, 9, 9, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
       device='mps:0')
y_predicted =  torch.tensor([2, 6, 6, 6, 6, 6, 8, 5, 1, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 1, 6, 5, 6,
        6, 4, 5, 8, 8, 6, 6, 6, 4, 6, 6, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6, 7, 6, 6,
        6, 6, 1, 6, 6, 4, 5, 6, 6, 4, 9, 6, 1, 6, 6, 6, 8, 6, 6, 8, 6, 5, 6, 5,
        6, 6, 6, 6, 1, 6, 3, 2, 6, 6, 8, 5, 3, 1, 7, 3, 0, 0, 0, 2, 6, 6, 6, 8,
        5, 6, 4, 2, 2, 0, 6, 6, 6, 6, 1, 6, 5, 6, 2, 4, 1, 2, 0, 2, 3, 8, 6, 1,
        2, 3, 0, 1, 6, 1, 8, 3, 2, 0, 0, 4, 1, 1, 2, 0, 0, 3, 0, 2, 3, 7, 2, 3,
        2, 2, 1, 3, 4, 5, 3, 6, 0, 1, 4, 0, 4, 0, 0, 5, 2, 2, 2, 4, 0, 2, 5, 7,
        0, 2, 2, 3, 0, 0, 2, 0, 1, 3, 5, 2, 1, 2, 0, 3, 2, 5, 2, 6, 0, 6, 0, 1,
        6, 6, 4, 6, 6, 6, 5, 4, 6, 5, 6, 4, 6, 2, 4, 5, 1, 8, 1, 5, 1, 4, 5, 6,
        7, 3, 3, 3, 3, 3, 7, 3, 3, 1, 3, 3, 7, 1, 3, 1, 3, 5, 3, 5, 7, 3, 3, 1,
        1, 3, 1, 3, 5, 0, 3, 1, 3, 7, 3, 3, 1, 3, 1, 5, 2, 1, 3, 3, 7, 1, 7, 4,
        3, 5, 3, 3, 7, 3, 7, 7, 3, 7, 4, 3, 7, 3, 4, 5, 3, 7, 7, 3, 1, 3, 3, 1,
        5, 7, 7, 4, 4, 4, 5, 6, 9, 7, 1, 6, 6, 6, 6, 1, 3, 6, 6, 9, 5, 6, 6, 8,
        8, 4, 0, 5, 4, 8, 7, 3, 5, 5, 7, 6, 6, 6, 6, 6, 5, 5, 6, 6, 4, 6, 5, 4,
        6, 1, 8, 7, 6, 6, 6, 6, 1, 6, 4, 8, 7, 3, 1, 6, 6, 5, 4, 6, 4, 6, 8, 6,
        1, 3, 5, 6, 6, 8, 5, 5, 7, 5, 7, 7, 7, 4, 6, 7, 5, 1, 2, 7, 2, 1, 1, 0,
        1, 0, 0, 0, 2, 7, 7, 1, 5, 4, 1, 5, 2, 0, 4, 1, 1, 7, 2, 3, 1, 2, 2, 0,
        0, 0, 0, 6, 7, 3, 0, 0, 1, 7, 0, 2, 2, 5, 5, 5, 0, 0, 3, 7, 0, 1, 4, 7,
        0, 2, 4, 0, 3, 3, 3, 1, 0, 0, 4, 5, 2, 3, 0, 7, 2, 7, 7, 3, 1, 0, 1, 2,
        7, 0, 5, 5, 2, 1, 4, 3, 3, 3, 0, 1, 1, 2, 0, 2, 0, 1, 4, 1, 2, 0, 1, 7,
        0, 7, 3, 0, 7, 5, 3, 0, 0, 0, 6, 0, 7, 0, 0, 2, 1, 0, 2, 0, 6, 5, 7, 1,
        2, 6, 0, 6, 1, 1, 3, 7, 0, 1, 0, 3, 6, 1, 2, 3, 0, 0, 6, 1, 1, 2, 0, 0,
        3, 1, 7, 2, 3, 4, 6, 2, 0, 5, 0, 6, 5, 0, 7, 0, 3, 5, 5, 2, 0, 2, 7, 7,
        7, 7, 7, 5, 7, 4, 7, 7, 1, 5, 1, 1, 7, 3, 6, 3, 2, 3, 0, 0, 2, 6, 5, 3,
        7, 5, 7, 2, 3, 5, 2, 1, 6, 7, 0, 7, 1, 5, 6, 5, 7, 6, 6, 5, 7, 6, 1, 0,
        6, 6, 4, 6, 9, 0, 7, 2, 7, 6, 6, 7, 6, 1, 6, 5, 4, 7, 6, 3, 3, 6, 0, 4,
        7, 4, 6, 5, 0, 3, 5, 1, 6, 2, 4, 7, 5, 4, 5, 7, 4, 7, 7, 5, 8, 6, 2, 9,
        6, 5, 8, 8, 6, 9, 6, 6, 8, 6, 6, 6, 5, 6, 8, 6, 6, 6, 6, 6, 8, 6, 2, 7,
        4, 6, 8, 6, 9, 8, 6, 6, 5, 6, 6, 6, 5, 8, 9, 6, 6, 6, 6, 9, 6, 6, 6, 8,
        6, 7, 8, 6, 6, 8, 5, 6, 6, 6, 6, 6, 6, 6, 6, 9, 6, 6, 6, 6, 8, 6, 6, 9],
       device='mps:0')

filename = 'q'


plotting_results.plot_image(training_loss, test_loss, num_epochs, learning_rate, classes, accuracies, y_test, y_predicted, filename, show = True)